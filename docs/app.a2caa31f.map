{"version":3,"sources":["js/localStorage.js","js/app.js"],"names":["bind","app","sendUpdate","key","value","ports","storageEvent","send","toStorage","subscribe","message","sendItem","msgType","saveItem","msg","localStorage","removeItem","setItem","e","err","error","sendStorageError","getItem","window","addEventListener","event","storageArea","newValue","console","log","Elm","Main","init","node","document","getElementById"],"mappings":";;;AA0EC,aAtEM,SAASA,EAAKC,GA4DRC,SAAAA,EAAWC,EAAKC,GACrBH,EAAII,MAAMC,aAAaC,KAAK,CAAEJ,IAAKA,EAAKC,MAAOA,IA3D9CH,EAAII,OAAWJ,EAAII,MAAMG,WAAaP,EAAII,MAAMC,cAQrDL,EAAII,MAAMG,UAAUC,UAAU,SAAAC,GA2CrBC,IAASR,EA1CS,QAAnBO,EAAQE,QAyBPC,SAASC,GACVA,GAAa,MAAbA,EAAIV,MACJW,aAAaC,WAAWF,EAAIX,KAC5BD,EAAWY,EAAIX,IAAKW,EAAIV,YAEpB,IACAW,aAAaE,QAAQH,EAAIX,IAAKW,EAAIV,OAClCF,EAAWY,EAAIX,IAAKW,EAAIV,OAC1B,MAAOc,GAuBSf,EAtBGW,EAAIX,IAsBFC,EAtBOU,EAAIV,MAsBJe,EAtBWD,EAAER,QAuB/CT,EAAII,MAAMC,aAAaC,KAAK,CAAEJ,IAAKA,EAAKC,MAAOA,EAAOgB,MAAOD,IADxDE,IAAiBlB,EAAKC,EAAOe,EAvD9BN,CAASH,EAAQI,KACS,WAAnBJ,EAAQE,SAyCnBV,EADcC,EAvCDO,EAAQI,IAwCLC,aAAaO,QAAQnB,MAnCzCoB,OAAOC,iBAAiB,UAAW,SAAUN,GACrCO,MAAMC,aAAeX,cAIrBb,EAAWgB,EAAEf,IAAKe,EAAES,aArBxBC,QAAQC,IACJ,0FAkEX,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,KAAA;;ACjED,aATA,IAAA,EAAA,QAAA,mBACA,EAAA,QAAA,qBAEM5B,EAAM6B,EAAIC,IAAAA,KAAKC,KAAK,CACxBC,KAAMC,SAASC,eAAe,UAKhC,EAAYlC,EAAAA,MAAAA","file":"app.a2caa31f.map","sourceRoot":"../app","sourcesContent":["/*\n * This function binds the ports defined in LocalStorage.elm to\n * the browser's localStorage API.\n */\nexport function bind(app) {\n    // Exit predictably if the ports aren't in use in Elm\n    if (!app.ports || !(app.ports.toStorage && app.ports.storageEvent)) {\n        console.log(\n            \"Could not find 'toStorage' and 'fromStorage' ports on app. They may not be in use yet.\"\n        );\n        return;\n    }\n\n    // Handle events from Elm\n    app.ports.toStorage.subscribe(message => {\n        if (message.msgType == \"save\") {\n            saveItem(message.msg);\n        } else if (message.msgType == \"request\") {\n            sendItem(message.msg);\n        }\n    });\n\n    // Broadcast localStorage changes to Elm\n    window.addEventListener(\"storage\", function (e) {\n        if (event.storageArea == localStorage) {\n            // Most use cases will only need a subset of the storage event\n            // data, but there's more available if you need it.\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/StorageEvent\n            sendUpdate(e.key, e.newValue);\n        }\n    });\n\n    // Utility Functions\n\n    /*\n     * Make a change to localStorage. If the provided value is null, clear\n     * the entry for the key. If there's an error writing to localStorage,\n     * send an error event to Elm, but also send the requested value back\n     * so the app can track the update in memory if it likes.\n     */\n    function saveItem(msg) {\n        if (msg.value == null) {\n            localStorage.removeItem(msg.key);\n            sendUpdate(msg.key, msg.value);\n        } else {\n            try {\n                localStorage.setItem(msg.key, msg.value);\n                sendUpdate(msg.key, msg.value);\n            } catch (e) {\n                sendStorageError(msg.key, msg.value, e.message);\n            }\n        }\n    }\n\n    /*\n     * Look up a key from storage and send it to Elm.\n     */\n    function sendItem(key) {\n        sendUpdate(key, localStorage.getItem(key));\n    }\n\n    /*\n     * Send a known update for a key to Elm.\n     */\n    function sendUpdate(key, value) {\n        app.ports.storageEvent.send({ key: key, value: value });\n    }\n\n    /*\n     * Send an error writing a key to Elm.\n     */\n    function sendStorageError(key, value, err) {\n        app.ports.storageEvent.send({ key: key, value: value, error: err });\n    }\n}","import { Elm } from '../elm/Main.elm';\nimport { bind as bindStorage } from \"./localStorage.js\";\n\nconst app = Elm.Main.init({\n  node: document.getElementById('app')\n});\n\n// LocalStorage\n\nbindStorage(app);"]}